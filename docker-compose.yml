#######################################################
# THIS FILE IS JUST FOR DEVELOPMENT PURPOSES ONLY!!!! #
#######################################################
version: '3.8'
services:

  proxy:
    image: traefik:v2.11
    command: --providers.docker
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


############################################
################  DATABASE  ################
############################################

  postgres:
    image: postgres:16-alpine3.20
    container_name: postgres_cloud_nine
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin_password
      POSTGRES_DB: cloud_nine
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - postgres_net

  # Add to volumes section

  # mongo-init:
  #   image: mongo:latest
  #   restart: "no"
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #   command: >
  #     mongosh --host mongodb --port 27017 -u admin -p admin --authenticationDatabase admin --eval '
  #       if (!rs.status().ok) {
  #         rs.initiate({
  #           _id: "rs0",
  #           members: [{ _id: 0, host: "mongodb:27017" }]
  #         });
  #         print("Replica set initialized");
  #       } else {
  #         print("Replica set already initialized");
  #       }
  #     '
  #   networks:
  #     - postgres_net


############################################
################  FRONTEND  ################
############################################

  client:
    build:
      context: ./
      target: client-dev
    develop:
      watch:
        - path: ./client/package.json
          action: rebuild
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
      - ./client/index.html:/app/index.html
      - ./client/vite.config.ts:/app/vite.config.ts
      - ./client/tailwind.config.js:/app/tailwind.config.js
      - ./client/tsconfig.json:/app/tsconfig.json
      - ./client/tsconfig.app.json:/app/tsconfig.app.json
      - ./client/tsconfig.node.json:/app/tsconfig.node.json

    ports:
      - 5173:5173

    labels:
      traefik.http.routers.client.rule: Host(`localhost`)
      traefik.http.services.client.loadbalancer.server.port: 5174

    networks:
      - backend_net

###################################################
################  BACKEND STAGES  #################
###################################################
  backend:
    build:
      context: ./
      target: backend-dev
    environment:
    # Add the DATABASE_URL environment variable
      DATABASE_URL: "postgresql://admin:admin_password@postgres:5432/cloud_nine"
      NODE_ENV: "development"


    # choose a database
    # environment:
      # MYSQL_HOST: mysql
      # MYSQL_USER: root
      # MYSQL_PASSWORD: secret
      # MYSQL_DB: todos
    develop:
      watch:
        - path: ./backend/package.json
          action: rebuild

    volumes:
      - ./backend/src:/app/src
      - ./backend/uploads:/app/uploads

    ports:
      - 3000:3000
    command: >
      sh -c "
        npx prisma generate && 
        if [ ! -d 'prisma/migrations' ] || [ -z \"$(ls -A prisma/migrations 2>/dev/null)\" ]; then
          npx prisma migrate dev &&
          npx prisma db push
        else
          npx prisma migrate deploy
        fi &&
        npm run dev
      "
    labels:
      traefik.http.routers.backend.rule: Host(`localhost`) && PathPrefix(`/api`)
      traefik.http.services.backend.loadbalancer.server.port: 3000

      # traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes: /api
      # traefik.http.routers.backend.middlewares: strip-api-prefix

    networks:
      - postgres_net
      - backend_net
    depends_on:
      - postgres
  
  
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./hqnw.live.pem:/etc/nginx/ssl/hqnw.live.pem:ro
      - ./hqnw.live.key:/etc/nginx/ssl/hqnw.live.key:ro
    depends_on:
      - client
      - backend
    networks:
      - postgres_net

networks:
  postgres_net:
    driver: bridge
  backend_net:
    driver: bridge