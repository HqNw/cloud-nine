version: '3.8'

services:
  postgres:
    image: postgres:16-alpine3.20
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-cloud_nine}"]
      start_interval: 1s
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"] 
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "8800:80"
      - "4443:443"
    networks:
      - app_network
    volumes:
      - ./backend/uploads:/app/uploads
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    command: >
      /bin/sh -c "
      chmod 600 /etc/nginx/ssl/* &&
      nginx -g 'daemon off;'
      "

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflare_project
    restart: unless-stopped
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./cloudflare/.cloudflared:/etc/cloudflared:ro
    environment:
      - TUNNEL_ORIGIN_CERT=/etc/cloudflared/cert.pem
    networks:
      - app_network

networks:
  app_network:
    driver: bridge